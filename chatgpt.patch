diff --git a/src/js/main.mjs b/src/js/main.mjs
index 7a081caaaba4c606d4544816207ffa1deabd8862..b7bf146b39e26360ec4392ef1117545658304a80 100644
--- a/src/js/main.mjs
+++ b/src/js/main.mjs
@@ -1,59 +1,62 @@
 // ===== main.mjs â€” app bootstrap, compute, render, plots =====
 
 import {
   q, read,
   G, W_PER_HP, PSI_TO_PA, CC_PER_GAL, M_PER_IN,
   tension_kgf, elec_available_tension_kgf,
   gpm_from_cc_rev_and_rpm, rpm_from_gpm_and_disp,
   psi_from_torque_and_disp_Nm_cc, torque_per_motor_from_pressure_Pa,
   line_speed_mpm_from_motor_rpm, hp_from_psi_and_gpm
 } from './utils.mjs';
 
 import { setupInputPersistence } from './persist-inputs.mjs';
 
 import { calcLayers } from './layer-engine.mjs';
 
 import {
   rowsToElectricLayer, projectElectricWraps, renderElectricTables
 } from './electric.mjs';
 
 import {
   rowsToHydraulicLayer, projectHydraulicWraps, renderHydraulicTables
 } from './hydraulic.mjs';
 
 import { drawWaveContours, drawWaveHeightContours } from './plots/wave-contours.mjs';
 import { drawDepthProfiles } from './plots/depth-profiles.mjs';
+import { setupComponentSelectors } from './component-selectors.mjs';
 
 // ---- App state for plots/tables ----
 let lastElLayer = [], lastElWraps = [];
 let lastHyLayer = [], lastHyWraps = [];
 
 // ---- Wire up events once DOM is ready ----
 document.addEventListener('DOMContentLoaded', () => {
   setupInputPersistence();
 
+  setupComponentSelectors();
+
   setupPlotResizeToggles();
 
   setupAutoRecompute();
 
   document.querySelectorAll('.param-label').forEach(label => {
     const code = label.dataset.code;
     if (code) {
       label.setAttribute('title', code);
     }
   });
 
   // Tabs
   document.querySelectorAll('.tab-btn').forEach(b => {
     b.addEventListener('click', () => {
       document.querySelectorAll('.tab-btn').forEach(x => x.classList.remove('active'));
       document.querySelectorAll('.panel').forEach(x => x.classList.remove('active'));
       b.classList.add('active');
       document.getElementById(b.dataset.target).classList.add('active');
     });
   });
 
   // Wave plot controls
   q('wave_redraw').addEventListener('click', () => redrawPlots());
   q('wave_scenario').addEventListener('change', () => redrawPlots());
   ['wave_tmin', 'wave_tmax', 'wave_vmax', 'wave_hmax'].forEach(id => q(id).addEventListener('change', () => redrawPlots()));
