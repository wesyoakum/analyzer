diff --git a/src/js/drum-visual.mjs b/src/js/drum-visual.mjs
index 8b620a57eecb73b74c8be63f831899645d33744a..01e947d22ea87729ef500f7f0836abfc462463e6 100644
--- a/src/js/drum-visual.mjs
+++ b/src/js/drum-visual.mjs
@@ -174,111 +174,118 @@ export function renderDrumVisualization(rows, summary, cfg, meta) {
     : 0;
   const outerDiaIn = Math.max(
     summaryOuterDiaIn,
     derivedOuterRadiusIn * 2,
     core_dia_in || 0,
     cable_dia_in || 0,
     1
   );
   const heightIn = outerDiaIn;
   const scale = heightIn > 0 ? (SVG_BASE_HEIGHT - 2 * SVG_MARGIN) / heightIn : 1;
   const widthIn = Math.max(flange_to_flange_in || 0, cable_dia_in || 0, 1);
   const widthPx = widthIn * scale;
   const heightPx = heightIn * scale;
   const viewWidth = widthPx + SVG_MARGIN * 2;
   const viewHeight = heightPx + SVG_MARGIN * 2;
 
   svg.setAttribute('viewBox', `0 0 ${viewWidth.toFixed(2)} ${viewHeight.toFixed(2)}`);
 
   const spoolLeft = SVG_MARGIN;
   const spoolRight = spoolLeft + widthPx;
   const centerY = SVG_MARGIN + heightPx / 2;
 
   const coreHeightPx = Math.max(0, (core_dia_in || 0) * scale);
   const coreWidthPx = Math.max(0, (flange_to_flange_in || 0) * scale);
 
+  const strokeWidth = 0.85;
+  const strokeWidthAttr = strokeWidth.toFixed(3);
+
   if (coreHeightPx > 0 && coreWidthPx > 0) {
     svg.appendChild(svgEl('rect', {
       x: spoolLeft.toFixed(2),
       y: (centerY - coreHeightPx / 2).toFixed(2),
       width: coreWidthPx.toFixed(2),
       height: coreHeightPx.toFixed(2),
       fill: 'none',
       stroke: rgbToCss(ink900Rgb, 0.72),
-      'stroke-width': 1
+      'stroke-width': strokeWidthAttr,
+      'vector-effect': 'non-scaling-stroke'
     }));
   }
 
   const axisColor = rgbToCss(ink700Rgb, 0.18);
   svg.appendChild(svgEl('line', {
     x1: spoolLeft.toFixed(2),
     y1: centerY.toFixed(2),
     x2: spoolRight.toFixed(2),
     y2: centerY.toFixed(2),
     stroke: axisColor,
-    'stroke-width': 1,
+    'stroke-width': strokeWidthAttr,
+    'vector-effect': 'non-scaling-stroke',
     'stroke-dasharray': '6 6'
   }));
 
   const cableRadiusPx = cable_dia_in > 0 ? (cable_dia_in / 2) * scale : 0;
   const cablePitchPx = cable_dia_in > 0 ? cable_dia_in * scale : 0;
 
   const wrapsByLayer = new Map();
   for (const row of rows) {
     wrapsByLayer.set(row.layer_no, (wrapsByLayer.get(row.layer_no) || 0) + 1);
   }
 
   if (cableRadiusPx > 0 && cablePitchPx > 0 && coreWidthPx > 0) {
     layersForViz.forEach(layer => {
       const wraps = wrapsByLayer.get(layer.layer_no) || 0;
       if (wraps <= 0) return;
       const centerOffsetPx = layer.center_radius_in * scale;
       const layerPhasePx = (layer.layer_no % 2 === 0) ? cablePitchPx / 2 : 0;
       const topY = centerY - centerOffsetPx;
       const bottomY = centerY + centerOffsetPx;
 
       for (let w = 0; w < wraps; w++) {
         const cx = spoolLeft + cableRadiusPx + layerPhasePx + w * cablePitchPx;
         if (cx - cableRadiusPx < spoolLeft - 1e-3) continue;
         if (cx + cableRadiusPx > spoolRight + 1e-3) continue;
 
         svg.appendChild(svgEl('circle', {
           cx: cx.toFixed(2),
           cy: topY.toFixed(2),
           r: cableRadiusPx.toFixed(2),
           fill: layer.fillColor,
           stroke: layer.strokeColor,
-          'stroke-width': 1
+          'stroke-width': strokeWidthAttr,
+          'vector-effect': 'non-scaling-stroke'
         }));
 
         svg.appendChild(svgEl('circle', {
           cx: cx.toFixed(2),
           cy: bottomY.toFixed(2),
           r: cableRadiusPx.toFixed(2),
           fill: layer.fillColor,
           stroke: layer.strokeColor,
-          'stroke-width': 1
+          'stroke-width': strokeWidthAttr,
+          'vector-effect': 'non-scaling-stroke'
         }));
       }
     });
   }
 
   // Summary & accessibility copy
   const cableLenDigits = cable_len_m >= 1000 ? 0 : cable_len_m >= 10 ? 1 : 2;
   const cableDiaDigits = cable_dia_mm >= 50 ? 0 : cable_dia_mm >= 10 ? 1 : 2;
   const layerWord = total_layers === 1 ? 'layer' : 'layers';
   const wrapWord = total_wraps === 1 ? 'wrap' : 'wraps';
   const summaryLine = `${fmt(cable_len_m, cableLenDigits)} m of ${fmt(cable_dia_mm, cableDiaDigits)} mm cable on ${fmt(total_layers, 0)} ${layerWord} with ${fmt(total_wraps, 0)} total ${wrapWord}`;
   const wrapsPerLayer = meta && Number.isFinite(meta.wraps_per_layer_used)
     ? ` (≈${fmt(meta.wraps_per_layer_used, 1)} wraps per layer)`
     : '';
   const geometryParts = [
     `core Ø ${fmt(core_dia_in, 2)} in`,
     `flange-to-flange ${fmt(flange_to_flange_in, 2)} in`,
     `Lebus liner ${fmt(lebus_thk_in, 3)} in`,
     `full drum Ø ${fmt(full_drum_dia_in, 2)} in`
   ];
   const geometryLine = `Drum geometry: ${geometryParts.join(', ')}.`;
   const summaryPlain = `${summaryLine}${wrapsPerLayer}. ${geometryLine}`;
 
   summaryEl.innerHTML = `<strong>${summaryLine}${wrapsPerLayer}.</strong> ${geometryLine}`;
   titleEl.textContent = `Winch drum cross-section with ${fmt(total_layers, 0)} ${layerWord}`;
