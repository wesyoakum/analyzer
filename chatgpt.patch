diff --git a/src/js/main.mjs b/src/js/main.mjs
index b7bf146b39e26360ec4392ef1117545658304a80..d830b29e40d1ce5c6cb4e2dec23ddad8862cbe46 100644
--- a/src/js/main.mjs
+++ b/src/js/main.mjs
@@ -17,80 +17,106 @@ import {
   rowsToElectricLayer, projectElectricWraps, renderElectricTables
 } from './electric.mjs';
 
 import {
   rowsToHydraulicLayer, projectHydraulicWraps, renderHydraulicTables
 } from './hydraulic.mjs';
 
 import { drawWaveContours, drawWaveHeightContours } from './plots/wave-contours.mjs';
 import { drawDepthProfiles } from './plots/depth-profiles.mjs';
 import { setupComponentSelectors } from './component-selectors.mjs';
 
 // ---- App state for plots/tables ----
 let lastElLayer = [], lastElWraps = [];
 let lastHyLayer = [], lastHyWraps = [];
 
 // ---- Wire up events once DOM is ready ----
 document.addEventListener('DOMContentLoaded', () => {
   setupInputPersistence();
 
   setupComponentSelectors();
 
   setupPlotResizeToggles();
 
   setupAutoRecompute();
 
+  updateBuildIndicator();
+
   document.querySelectorAll('.param-label').forEach(label => {
     const code = label.dataset.code;
     if (code) {
       label.setAttribute('title', code);
     }
   });
 
   // Tabs
   document.querySelectorAll('.tab-btn').forEach(b => {
     b.addEventListener('click', () => {
       document.querySelectorAll('.tab-btn').forEach(x => x.classList.remove('active'));
       document.querySelectorAll('.panel').forEach(x => x.classList.remove('active'));
       b.classList.add('active');
       document.getElementById(b.dataset.target).classList.add('active');
     });
   });
 
   // Wave plot controls
   q('wave_redraw').addEventListener('click', () => redrawPlots());
   q('wave_scenario').addEventListener('change', () => redrawPlots());
   ['wave_tmin', 'wave_tmax', 'wave_vmax', 'wave_hmax'].forEach(id => q(id).addEventListener('change', () => redrawPlots()));
 
   // Depth plot controls
   q('depth_redraw').addEventListener('click', () => redrawPlots());
   q('depth_scenario').addEventListener('change', () => redrawPlots());
 
   // Initial compute
   computeAll();
 });
 
+function updateBuildIndicator() {
+  const indicator = /** @type {HTMLElement|null} */ (document.getElementById('build-info'));
+  if (!indicator) return;
+
+  const lastModified = new Date(document.lastModified);
+  if (Number.isNaN(lastModified.getTime())) {
+    indicator.textContent = `Updated ${document.lastModified}`;
+    return;
+  }
+
+  const formatter = new Intl.DateTimeFormat('en-US', {
+    year: 'numeric',
+    month: 'short',
+    day: '2-digit',
+    hour: '2-digit',
+    minute: '2-digit',
+    second: '2-digit',
+    hour12: false,
+    timeZone: 'UTC'
+  });
+
+  indicator.textContent = `Updated ${formatter.format(lastModified)} UTC`;
+}
+
 function setupPlotResizeToggles() {
   const toggles = document.querySelectorAll('[data-plot-toggle]');
   toggles.forEach(btn => {
     const col = btn.closest('.plot-column');
     if (!col) return;
     const initialExpanded = col.classList.contains('is-expanded');
     btn.textContent = initialExpanded ? '[-]' : '[+]';
     btn.setAttribute('aria-expanded', initialExpanded ? 'true' : 'false');
     btn.addEventListener('click', () => {
       const expanded = col.classList.toggle('is-expanded');
       btn.textContent = expanded ? '[-]' : '[+]';
       btn.setAttribute('aria-expanded', expanded ? 'true' : 'false');
     });
   });
 }
 
 function setupAutoRecompute() {
   const inputs = Array.from(document.querySelectorAll('input, select, textarea'));
   if (!inputs.length) return;
 
   const handler = () => computeAll();
 
   inputs.forEach(el => {
     if (el.tagName === 'SELECT') {
       el.addEventListener('change', handler);
