diff --git a/src/js/main.mjs b/src/js/main.mjs
index a860e2d3952c6ad3572820c4c07d77b8d92905d0..ccde952a211bf3851bccf855affd3b4c0c36c340 100644
--- a/src/js/main.mjs
+++ b/src/js/main.mjs
@@ -413,52 +413,53 @@ function computeAll() {
       wraps_per_layer_override
     };
     const payload_kg = read('payload_kg');
     const cable_w_kgpm = read('c_w_kgpm');
 
     const rated_speed_mpm = read('rated_speed_mpm');
     const rated_swl_kgf = read('rated_swl_kgf');
     const system_efficiency = read('system_efficiency');
 
     updateMinimumSystemHp(rated_speed_mpm, rated_swl_kgf, system_efficiency);
 
     const positiveOr = (value, fallback) => (Number.isFinite(value) && value > 0 ? value : fallback);
 
     // Shared drivetrain
     const gr1 = positiveOr(read('gr1'), 1);
     const gr2 = positiveOr(read('gr2'), 1);
     const motors = positiveOr(read('motors'), 1);
     const denom_mech = gr1 * gr2 * motors;
 
     const electricEnabled = driveModeEnabled('electric');
     const hydraulicEnabled = driveModeEnabled('hydraulic');
 
     // Electric inputs
     const motor_max_rpm = read('motor_max_rpm');
     const motor_hp = positiveOr(read('motor_hp'), 0);
+    const motor_eff = positiveOr(read('motor_eff'), 1);
     const motor_tmax = read('motor_tmax');
-    const P_per_motor_W = motor_hp * W_PER_HP;
+    const P_per_motor_W = motor_hp * motor_eff * W_PER_HP;
 
     // Hydraulic inputs
     const h_strings = positiveOr(read('h_pump_strings'), 0);
     const h_emotor_hp = positiveOr(read('h_emotor_hp'), 0);
     const h_emotor_eff = positiveOr(read('h_emotor_eff'), 0); // electro-hydraulic efficiency
     const h_emotor_rpm = positiveOr(read('h_emotor_rpm'), 0);
     const h_pump_cc = positiveOr(read('h_pump_cc'), 0);
     const h_max_psi = positiveOr(read('h_max_psi'), 0);
     const h_hmot_cc = positiveOr(read('h_hmot_cc'), 0);
     const h_hmot_rpm_cap = positiveOr(read('h_hmot_rpm_max'), Infinity);
 
     // Usable hydraulic hp & flow from pump strings
     const hp_str_usable = h_emotor_hp * h_emotor_eff;
     const hp_tot_usable = hp_str_usable * h_strings;
     const q_str_gpm = gpm_from_cc_rev_and_rpm(h_pump_cc, h_emotor_rpm);
     const q_tot_gpm = q_str_gpm * h_strings;
 
     // Max-pressure torque per hydraulic motor and at drum (pressure-limited)
     const dP_Pa = h_max_psi * PSI_TO_PA;
     const torque_per_hmotor_maxP = torque_per_motor_from_pressure_Pa(dP_Pa, h_hmot_cc); // NÂ·m per motor at max P
     const torque_at_drum_maxP_factor = Math.max(gr1, 1) * Math.max(gr2, 1) * Math.max(motors, 1);
 
     // Generate wraps from geometry
     const { rows, summary, meta } = calcLayers(cfg);
 
